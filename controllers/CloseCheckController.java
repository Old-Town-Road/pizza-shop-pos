package controllers;

/**
 * This class controls CloseCheck view.
 *
 * @author Raiana Zaman, Sultan Al Bogami Last Updated: 05/01/2020
 * DEV-NOTES:
 * -> Created a method accepting data from other controllers.
 * -> Modified cashOutAction method to call a helper method.
 * -> Created a helper method processing the payment with relevent data.
 * -> Validated the style-guide.
 */

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.stage.Stage;
import models.Check;
import models.MenuItem;
import models.Ticket;
import models.User;
import views.Frame;
import views.SetView;

import java.net.URL;
import java.util.Date;
import java.util.ResourceBundle;

public class CloseCheckController implements Initializable {
	private User currentUser;
	private Check currentCheck;
	private boolean debug = true;

	public CloseCheckController() {
	}

	/**
	 * Called once implementing the controller.
	 *
	 * @param _url
	 * @param _rb
	 */
	public void initialize(URL _url, ResourceBundle _rb) {
		if (debug) {
			this.currentUser = createFakeUser(this.currentUser);
			this.currentCheck = createFakeCheck(this.currentCheck);
		}
		else {
			// Data are passed form menu order
		}
	}

	/**
	 * A helper method accepting the data for cash out Action.
	 *
	 * @param _user
	 * @param _check
	 */
	public void initData(User _user, Check _check) {
		this.currentUser = _user;
		this.currentCheck = _check;
	}

	/**
	 * Called when any of the scene buttons is clicked.
	 *
	 * @param _event is of semantic type generated by the clicked button.
	 */
	@FXML
	private void cashOutAction(ActionEvent _event) {
		// Get the text of the button which determines the payment type.
		String paymentType = ((Button) _event.getSource()).getText();
		// Call the helper method to process the payment and do the cash-out.
		processPayment(this.currentUser, this.currentCheck, paymentType);
		Stage stage = (Stage) ((Node) _event.getSource()).getScene().getWindow();
		stage.close();
		new Frame(new Stage(), SetView.ORDER_TYPE_VIEW);
	}

	/**
	 * A helper method to process the payment and create a transaction history.
	 *
	 * @param _currentUser  is the user/server making a cash-out action.
	 * @param _currentCheck is the current check to be cashed out by _currentUser.
	 * @param _paymentType  is the text of the button pressed by the _currentUser and treated as a valid payment option.
	 */
	private void processPayment(User _currentUser, Check _currentCheck, String _paymentType) {
		_currentCheck.getCheckTotal();
		// TODO display something to confirm payment.
		Date date = new Date();
		// Give the check a close-date.
		_currentCheck.setDateClosed(date);
		// Update the check status to 0 indicating this check is closed now.
		_currentCheck.setCheckStatus(0);
		// TODO create transaction history and back to orderType view.
	}

	/**
	 * A helper method assigning fake info to user for debugging purposes.
	 * @param _currentUser is a user object acting as a fake user.
	 * @return a fake user object.
	 */
	private User createFakeUser(User _currentUser) {
		_currentUser = new User(1, "1", 1, true,"I am a", "FAKE", "USER", 1);
		return _currentUser;
	}

	/**
	 * A helper method creating a fake table check for debugging purposes
	 * @param _currentCheck is the fake check of which information are being assembled.
	 * @return  a check object.
	 */
	private Check createFakeCheck(Check _currentCheck) {
		// Instantiate a Date object for fake check & ticket
		Date date = new Date();
		// create the fake check
		_currentCheck = new Check(1, this.currentUser.getId(), 1, date, null);
		// create a fake ticket
		Ticket ticket = new Ticket(date, this.currentUser.getId(), 1, 1, 1);
		// Create fake items to be added to the ticket
		MenuItem pepPizza = new MenuItem(1, "Pepperoni Pizza", 13.99, 0, 0);
		pepPizza.setId(1);
		MenuItem chePizza = new MenuItem(1, "Cheese Pizza", 13.99, 0, 0);
		chePizza.setId(2);
		MenuItem cokeDrink = new MenuItem(2, "Coke", 3.99, 0, 0);
		cokeDrink.setId(3);
		// Add the fake items to the ticket
		ticket.addMenuItem(pepPizza);
		ticket.addMenuItem(chePizza);
		ticket.addMenuItem(cokeDrink);
		// Add the fake ticket to the fake check
		_currentCheck.addTicketToCheck(ticket);
		// Fake check is ready to use.
		return _currentCheck;
	}

//    /**
//     * Called when a log-off button is clicked.
//     *
//     * @param _event
//     */
//    @FXML
//    private void logOffAction(ActionEvent _event) {
//        Stage stage = (Stage) ((Node) _event.getSource()).getScene().getWindow();
//        stage.close();
//        new Frame(new Stage(), SetView.LOG_IN_VIEW);
//    }
}
